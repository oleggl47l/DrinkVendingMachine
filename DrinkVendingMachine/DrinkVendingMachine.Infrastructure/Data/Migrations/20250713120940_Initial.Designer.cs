// <auto-generated />
using System;
using DrinkVendingMachine.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DrinkVendingMachine.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713120940_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Coca-Cola"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepsi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fanta"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sprite"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mountain Dew"
                        },
                        new
                        {
                            Id = 6,
                            Name = "7Up"
                        });
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Coin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Nominal")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Coins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsBlocked = false,
                            Nominal = 1,
                            Quantity = 500
                        },
                        new
                        {
                            Id = 2,
                            IsBlocked = false,
                            Nominal = 2,
                            Quantity = 400
                        },
                        new
                        {
                            Id = 3,
                            IsBlocked = false,
                            Nominal = 5,
                            Quantity = 300
                        },
                        new
                        {
                            Id = 4,
                            IsBlocked = false,
                            Nominal = 10,
                            Quantity = 200
                        });
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=e92740110da039f1caea551d11cf271a14e5291b-4261589-images-thumbs&n=13",
                            Name = "Coca-Cola Classic 0.33L",
                            Price = 82,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=0a2126d6b7a42414a80f9fe2a8d5d0fc6ae9bc20-12569871-images-thumbs&n=13",
                            Name = "Pepsi 0.33L",
                            Price = 80,
                            Quantity = 12
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=ed98493dc133b26db2aae9a1dd732ee0eda8a7e9-5263755-images-thumbs&n=13",
                            Name = "Fanta Orange 0.33L",
                            Price = 84,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=c1bc9eca3c1bba813ec634c0b00b5a957313f00c-4462454-images-thumbs&n=13",
                            Name = "Sprite Lemon-Lime 0.33L",
                            Price = 75,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=37f21a1246146e0582ee6f20b26efae9ef8c57dd-5664541-images-thumbs&n=13",
                            Name = "Mountain Dew 0.33L",
                            Price = 85,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=dea8080e40047cb9a537383f0e33e92d14935301-8183104-images-thumbs&n=13",
                            Name = "7Up 0.33L",
                            Price = 72,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=2eeb95cb38c3725a08e95d446e52239ab1ccbc58-12928152-images-thumbs&n=13",
                            Name = "Coca-Cola Zero 0.33L",
                            Price = 83,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 2,
                            ImageUrl = "https://avatars.mds.yandex.net/i?id=bbd1651c52ac2f21a3b6375f0bf31e7562c3fd63-4219714-images-thumbs&n=13",
                            Name = "Pepsi Max 0.33L",
                            Price = 100,
                            Quantity = 6
                        });
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceAtPurchase")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Drink", b =>
                {
                    b.HasOne("DrinkVendingMachine.Domain.Entities.Brand", "Brand")
                        .WithMany("Drinks")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("DrinkVendingMachine.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("DrinkVendingMachine.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
